{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\arjen\\\\OneDrive\\\\Bruin-Referrals\\\\home-page\\\\src\\\\PostList.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst PostList = () => {\n  _s();\n  const [posts, setPosts] = useState([]);\n  const [page, SetPage] = useState(1);\n  const [loading, setLoading] = useState(false);\n  const userRef = useRef();\n\n  //FETCH POSTS (TESTING WITH JSON API)\n  const fetchPosts = async () => {\n    setLoading(true);\n    try {\n      const response = await fetch(`https://jsonplaceholder.typicode.com/posts?_page=${page}&_limit=10`);\n      const data = await response.json();\n      setPosts(prevPosts);\n    } catch (error) {\n      console.error('Error fetching posts:', error);\n    }\n    setLoading(false);\n  };\n\n  //LOAD POSTS ON PADE LOAD\n  useEffect(() => {\n    fetchPosts();\n  }, [page]);\n\n  //INFINITE SCROLL\n  useEffect(() => {\n    const observer = new IntersectionObserver(entries => {\n      if (entries[0].isIntersecting) {\n        setPage(prevPage => prevPage + 1);\n      }\n    }, {\n      threshold: 1\n    });\n    if (userRef.current) {\n      observer.observe(userRef.current);\n    }\n    return () => {\n      if (userRef.current) {\n        observer.observe(userRef.current);\n      }\n    };\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Post List\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: posts.map(post => /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: post.title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: post.body\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 25\n        }, this)]\n      }, post.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      ref: userRef,\n      style: {\n        height: \"20 px\"\n      },\n      children: loading && 'Loading...'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 53,\n    columnNumber: 9\n  }, this);\n};\n_s(PostList, \"FZubkEZSrsr1YF4jg362wXTgmK4=\");\n_c = PostList;\nexport default PostList;\nvar _c;\n$RefreshReg$(_c, \"PostList\");","map":{"version":3,"names":["React","useState","useEffect","useRef","jsxDEV","_jsxDEV","PostList","_s","posts","setPosts","page","SetPage","loading","setLoading","userRef","fetchPosts","response","fetch","data","json","prevPosts","error","console","observer","IntersectionObserver","entries","isIntersecting","setPage","prevPage","threshold","current","observe","children","fileName","_jsxFileName","lineNumber","columnNumber","map","post","title","body","id","ref","style","height","_c","$RefreshReg$"],"sources":["C:/Users/arjen/OneDrive/Bruin-Referrals/home-page/src/PostList.jsx"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\r\n\r\nconst PostList = () => {\r\n    const [posts, setPosts] = useState([]);\r\n    const [page, SetPage] = useState(1);\r\n    const [loading, setLoading] = useState(false);\r\n    const userRef = useRef();\r\n\r\n    //FETCH POSTS (TESTING WITH JSON API)\r\n    const fetchPosts = async () => {\r\n        setLoading(true);\r\n        try {\r\n            const response = await fetch(\r\n                `https://jsonplaceholder.typicode.com/posts?_page=${page}&_limit=10`\r\n            );\r\n            const data = await response.json();\r\n            setPosts((prevPosts));\r\n        } catch (error) {\r\n            console.error('Error fetching posts:', error);\r\n        }\r\n        setLoading(false);\r\n    };\r\n\r\n    //LOAD POSTS ON PADE LOAD\r\n    useEffect(() => {\r\n        fetchPosts();\r\n    }, [page]);\r\n\r\n    //INFINITE SCROLL\r\n    useEffect(() => {\r\n        const observer = new IntersectionObserver(\r\n            (entries) => {\r\n                if (entries[0].isIntersecting) {\r\n                    setPage((prevPage) => prevPage + 1);\r\n                }\r\n            },\r\n            { threshold: 1}\r\n        );\r\n\r\n        if (userRef.current) {\r\n            observer.observe(userRef.current);\r\n        }\r\n\r\n        return () => {\r\n            if (userRef.current) {\r\n                observer.observe(userRef.current);\r\n            }\r\n        };\r\n    \r\n    }, []);\r\n\r\n    return (\r\n        <div>\r\n            <h1>Post List</h1>\r\n            <div>\r\n                {posts.map((post) => (\r\n                    <div key={post.id}>\r\n                        <h2>{post.title}</h2>\r\n                        <p>{post.body}</p>\r\n                    </div>\r\n                ))}\r\n            </div>\r\n            <div ref={userRef} style={{ height: \"20 px\"}}>{loading && 'Loading...'}</div>\r\n        </div>\r\n    );\r\n\r\n};\r\n\r\nexport default PostList;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}