{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\arjen\\\\OneDrive\\\\Bruin-Referrals\\\\home-page\\\\src\\\\PostList.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst PostList = () => {\n  _s();\n  const [posts, setPosts] = useState([]);\n  const [page, setPage] = useState(1);\n  const [loading, setLoading] = useState(false);\n  const observerRef = useRef();\n\n  // Fetch posts from API\n  const fetchPosts = async () => {\n    setLoading(true);\n    try {\n      const response = await fetch(`https://jsonplaceholder.typicode.com/posts?_page=${page}&_limit=10`);\n      const data = await response.json();\n      setPosts(prevPosts => [...prevPosts, ...data]);\n    } catch (error) {\n      console.error(\"Error fetching posts:\", error);\n    }\n    setLoading(false);\n  };\n\n  // Load posts when page changes\n  useEffect(() => {\n    fetchPosts();\n  }, [page]);\n\n  // Set up IntersectionObserver for infinite scrolling\n  useEffect(() => {\n    const observer = new IntersectionObserver(entries => {\n      if (entries[0].isIntersecting) {\n        setPage(prevPage => prevPage + 1);\n      }\n    }, {\n      threshold: 1\n    });\n    if (observerRef.current) {\n      observer.observe(observerRef.current);\n    }\n    return () => {\n      if (observerRef.current) {\n        observer.unobserve(observerRef.current);\n      }\n    };\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Post Feed\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }, this), posts.map(post => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"post\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: post.title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: post.body\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 11\n      }, this)]\n    }, post.id, true, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 9\n    }, this)), loading && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading more posts...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 19\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      ref: observerRef,\n      style: {\n        height: \"20px\"\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 52,\n    columnNumber: 5\n  }, this);\n};\n_s(PostList, \"Wg/cChwWKbB5FxLCusSHLXe04Sg=\");\n_c = PostList;\nexport default PostList;\nvar _c;\n$RefreshReg$(_c, \"PostList\");","map":{"version":3,"names":["React","useState","useEffect","useRef","jsxDEV","_jsxDEV","PostList","_s","posts","setPosts","page","setPage","loading","setLoading","observerRef","fetchPosts","response","fetch","data","json","prevPosts","error","console","observer","IntersectionObserver","entries","isIntersecting","prevPage","threshold","current","observe","unobserve","children","fileName","_jsxFileName","lineNumber","columnNumber","map","post","className","title","body","id","ref","style","height","_c","$RefreshReg$"],"sources":["C:/Users/arjen/OneDrive/Bruin-Referrals/home-page/src/PostList.jsx"],"sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\r\n\r\nconst PostList = () => {\r\n  const [posts, setPosts] = useState([]);\r\n  const [page, setPage] = useState(1);\r\n  const [loading, setLoading] = useState(false);\r\n  const observerRef = useRef();\r\n\r\n  // Fetch posts from API\r\n  const fetchPosts = async () => {\r\n    setLoading(true);\r\n    try {\r\n      const response = await fetch(\r\n        `https://jsonplaceholder.typicode.com/posts?_page=${page}&_limit=10`\r\n      );\r\n      const data = await response.json();\r\n      setPosts((prevPosts) => [...prevPosts, ...data]);\r\n    } catch (error) {\r\n      console.error(\"Error fetching posts:\", error);\r\n    }\r\n    setLoading(false);\r\n  };\r\n\r\n  // Load posts when page changes\r\n  useEffect(() => {\r\n    fetchPosts();\r\n  }, [page]);\r\n\r\n  // Set up IntersectionObserver for infinite scrolling\r\n  useEffect(() => {\r\n    const observer = new IntersectionObserver(\r\n      (entries) => {\r\n        if (entries[0].isIntersecting) {\r\n          setPage((prevPage) => prevPage + 1);\r\n        }\r\n      },\r\n      { threshold: 1 }\r\n    );\r\n\r\n    if (observerRef.current) {\r\n      observer.observe(observerRef.current);\r\n    }\r\n\r\n    return () => {\r\n      if (observerRef.current) {\r\n        observer.unobserve(observerRef.current);\r\n      }\r\n    };\r\n  }, []);\r\n\r\n  return (\r\n    <div>\r\n      <h2>Post Feed</h2>\r\n      {posts.map((post) => (\r\n        <div key={post.id} className=\"post\">\r\n          <h3>{post.title}</h3>\r\n          <p>{post.body}</p>\r\n        </div>\r\n      ))}\r\n      {loading && <p>Loading more posts...</p>}\r\n      <div ref={observerRef} style={{ height: \"20px\" }}></div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PostList;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}